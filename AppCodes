package com.example.signupapp;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class SignUpActivity extends AppCompatActivity {

    private EditText usernameEditText, emailEditText, passwordEditText;
    private Button signUpButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sign_up);

22/01/2025 - Practice Code
package com.example.signupapp;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class SignUpActivity extends AppCompatActivity {

    private EditText usernameEditText, emailEditText, passwordEditText;
    private Button signUpButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_sign_up);

        // Initialize UI components
        usernameEditText = findViewById(R.id.editTextUsername);
        emailEditText = findViewById(R.id.editTextEmail);
        passwordEditText = findViewById(R.id.editTextPassword);
        signUpButton = findViewById(R.id.buttonSignUp);

        // Set OnClickListener for the Sign-Up button
        signUpButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String username = usernameEditText.getText().toString().trim();
                String email = emailEditText.getText().toString().trim();
                String password = passwordEditText.getText().toString().trim();

                if (TextUtils.isEmpty(username)) {
                    usernameEditText.setError("Username is required");
                    return;
                }

                if (TextUtils.isEmpty(email)) {
                    emailEditText.setError("Email is required");
                    return;
                }

                if (TextUtils.isEmpty(password)) {
                    passwordEditText.setError("Password is required");
                    return;
                }

                // Simulate successful sign-up
                Toast.makeText(SignUpActivity.this, "Sign-Up Successful!", Toast.LENGTH_SHORT).show();
            }
        });
    }
}

26/01/2025 - 
Practice Code for chunking multiple files
import android.os.Environment
import java.io.*

fun chunkFiles(files: List<File>, chunkSize: Int, outputDir: File) {
    // Ensure the output directory exists
    if (!outputDir.exists()) {
        outputDir.mkdirs()
    }

    for (file in files) {
        val fileName = file.nameWithoutExtension
        val extension = file.extension

        BufferedInputStream(FileInputStream(file)).use { inputStream ->
            var chunkIndex = 1
            var buffer = ByteArray(chunkSize)
            var bytesRead: Int

            while (inputStream.read(buffer).also { bytesRead = it } != -1) {
                val chunkFileName = "$fileName-chunk$chunkIndex.$extension"
                val chunkFile = File(outputDir, chunkFileName)

                FileOutputStream(chunkFile).use { outputStream ->
                    outputStream.write(buffer, 0, bytesRead)
                }

                println("Created chunk: ${chunkFile.absolutePath}")
                chunkIndex++
            }
        }
    }
}

fun main() {
    // Example usage
    val inputFiles = listOf(
        File(Environment.getExternalStorageDirectory(), "file1.txt"),
        File(Environment.getExternalStorageDirectory(), "file2.txt")
    )
    val chunkSize = 1024 * 1024 // 1 MB
    val outputDir = File(Environment.getExternalStorageDirectory(), "Chunks")

    chunkFiles(inputFiles, chunkSize, outputDir)
}


























